<?php
/**
 * @file unimelb_tests.test
 * Tests for the Faculty of Arts install profile.
 */

/**
 * Test install profile theme settings.
 */
class FoaThemeTestCase extends DrupalWebTestCase {
  // Use the Faculty of Arts profile.
  protected $profile = 'foa';

  public static function getInfo() {
    return array(
      'name' => 'Theme settings',
      'description' => 'Test that the profile theme settings are correct.',
      'group' => 'FoA',
    );
  }

  /**
   * Are the correct themes enabled and set as defaults?
   */
  function testFoaThemeDefaults() {
    $default_theme = variable_get('theme_default', '');

    // Correct default?
    $this->assertTrue(($default_theme == 'unimelb'), "The default theme is set to '" . $default_theme . "'.");

    // Default enabled?
    $result = db_select('system', 's')
      ->fields('s', array('status'))
      ->condition('type', 'theme')
      ->condition('name', $default_theme)
      ->execute()
      ->fetchField();
    $this->assertTrue($result, 'The default theme is enabled.');

    $admin_theme = variable_get('admin_theme', '');

    // Correct admin theme?
    $this->assertTrue(($admin_theme == 'rubik'), "The admin theme is set to '" . $admin_theme . "'.");

    // Admin theme enabled?
    $result = db_select('system', 's')
      ->fields('s', array('status'))
      ->condition('type', 'theme')
      ->condition('name', $admin_theme)
      ->execute()
      ->fetchField();
    $this->assertTrue($result, 'The admin theme is enabled.');
  }
}

/**
 * Test install profile block settings.
 */
class FoaBlockTestCase extends FoaWebTestCase {
  // Use the Faculty of Arts profile.
  protected $profile = 'foa';

  public static function getInfo() {
    return array(
      'name' => 'Block settings',
      'description' => 'Test that the profile block settings are correct.',
      'group' => 'FoA',
    );
  }

  /**
   * Check that required blocks are enabled.
   *
   * Also check they are in the correct regions with the correct page and
   * visibility options. To add a block to test, just add an element to
   * the (end of the) $blocks array.
   */
  function testFoaBlocks() {
    // Themes.
    $default_theme = variable_get('theme_default', '');

    // An array we can cycle through to test the blocks.
    $blocks = array();

    $blocks['Banner'] = array(
      ':module' => 'views',
      ':delta' => 'slider-block',
      ':theme' => $default_theme,
      ':region' => 'slider',
      ':visibility' => 1,
      ':pages' => '<front>',
    );

    // Generate data to test for 6 frontpage blocks.
    for ($i = 1; $i <= 6; $i++) {
      $blocks['Front Page Block ' . $i]  = array(
        ':module' => 'views',
        ':delta' => 'front_page-block_' . $i,
        ':theme' => $default_theme,
        ':region' => 'home_column_' . $i,
        ':visibility' => 1,
        ':pages' => '<front>',
      );
    }

    $blocks['Events'] = array(
      ':module' => 'views',
      ':delta' => 'events-block',
      ':theme' => $default_theme,
      ':region' => 'sidebar_right',
      ':visibility' => 1,
      ':pages' => '<front>',
    );

    $blocks['News'] = array(
      ':module' => 'views',
      ':delta' => 'news-block',
      ':theme' => $default_theme,
      ':region' => 'sidebar_right',
      ':visibility' => 1,
      ':pages' => '<front>',
    );

    $blocks['jQuery Navigation'] = array(
      ':module' => 'jquerymenu',
      ':delta' => 1,
      ':theme' => $default_theme,
      ':region' => 'navigation',
      ':visibility' => 0,
      ':pages' => '<front>',
    );

    // Cycle through the blocks array and test each block in turn by doing a
    // simple database query with defined conditions that check the region,
    // visibility, theme and pages for which blocks are enabled.
    foreach ($blocks as $title => $block) {
      $query = 'SELECT status FROM {block} WHERE module = :module AND delta = :delta AND theme = :theme AND region = :region AND visibility = :visibility AND pages = :pages';
      $status = db_query($query, $block)->fetchField();

      $this->assertTrue(($status == 1), t('The %title block is enabled in the %region region', array('%title' => $title, '%region' => $block[':region'])));
    }
  }
}

/**
 * Test feature node permissions.
 */
class FoaPermissionTestCase extends FoaNodeAccessTestCase {
  // Use the Faculty of Arts profile.
  protected $profile = 'foa';

  public static function getInfo() {
    return array(
      'name' => 'Permission settings',
      'description' => 'Test that the profile permission settings are correct.',
      'group' => 'FoA',
    );
  }

  // Install the FoA feature. Probably done by the profile anyway.
  function setUp() {
    parent::setUp('unimelb_arts', 'uom_slider');
  }

  /**
   * Check that each of the roles have the correct node permissions.
   *
   * - Anonymous and authenticated users can not create or edit nodes.
   * - Editors can edit their own nodes, but not create any.
   * - Admins can create, edit and delete any nodes.
   *
   * Node types to test: page, news, event, slider.
   */
  function testFoaNodePermissions() {
    $map = array(
      'own' => array(
        'anonymous user' => array('view' => TRUE, 'create' => FALSE, 'update' => FALSE, 'delete' => FALSE),
        'authenticated user' => array('view' => TRUE, 'create' => FALSE, 'update' => FALSE, 'delete' => FALSE),
        'editor' => array('create' => FALSE, 'update' => TRUE, 'delete' => FALSE),
        'admin' => array('create' => TRUE, 'update' => TRUE, 'delete' => TRUE),
        'site admin' => array('create' => TRUE, 'update' => TRUE, 'delete' => TRUE),
      ),
      'any' => array(
        'anonymous user' => array('view' => TRUE, 'update' => FALSE, 'delete' => FALSE),
        'authenticated user' => array('view' => TRUE, 'update' => FALSE, 'delete' => FALSE),
        'editor' => array('update' => FALSE, 'delete' => FALSE),
        'admin' => array('update' => TRUE, 'delete' => TRUE),
        'site admin' => array('update' => TRUE, 'delete' => TRUE),
      ),
    );

    $types = array('page', 'news', 'event');
    // Create nodes of each type.
    foreach ($types as $type) {
      $nodes[$type] = $this->drupalCreateNode(array('uid' => 1, 'type' => $type));
    }

    // $roles = db_query('SELECT rid, name FROM {role} WHERE rid != :rid ORDER BY rid ASC', array(':rid' => DRUPAL_ANONYMOUS_RID));
    $roles = db_query('SELECT rid, name FROM {role} ORDER BY rid ASC');
    // Create users with each role.
    foreach ($roles as $role) {
      $accounts[$role->name] = $this->foaCreateUser(array($role->rid => $role->name));
      $accounts[$role->name]->map = $role->name;
    }

    $permutations = $this->generatePermutations(array(
      'account' => $accounts,
      'node' => $nodes,
    ));

    foreach ($permutations as $case) {
      debug('Testing ' . $case['account']->map . ' any ' . $case['node']->type .' access.');
      $this->assertNodeAccess($map['any'][$case['account']->map], $case['node'], $case['account']);

      // Make this an own node, then test own access.
      $case['node']->uid = $case['account']->uid;
      node_save($case['node']);

      debug('Testing ' . $case['account']->map . ' own ' . $case['node']->type .' access.');
      $this->assertNodeAccess($map['any'][$case['account']->map], $case['node'], $case['account']);
    }
  }
}
