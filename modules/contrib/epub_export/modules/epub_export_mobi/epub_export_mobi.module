<?php
/**
 * @file
 * Integration with Amazon's kindlegen to convert epub to mobi format.
 */

/**
 * Implements hook_menu().
 * @return [type] [description]
 */
function epub_export_mobi_menu() {
  $items = array();

  // Settings page.
  $items['admin/config/system/epub-export-mobi'] = array(
    'title' => 'EPUB Export (mobi)',
    'description' => 'Setup configuration for EPUB Export mobi converter.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('epub_export_mobi_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'epub_export_mobi.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_epub_export_attach_epub().
 */
function epub_export_mobi_epub_export_attach_epub($entity, $file, $field) {
  $mobiname = preg_replace('/\.epub$/', '.mobi', $file->filename);
  $realpath = drupal_realpath($file->uri);

  // The kindlegen binary doesn't let us specify a destination path. The mobi
  // file will be build in the same location as the source file. To avoid making
  // a mess we work in the temp directory and then copy over if everything was
  // successful.
  $epubsource = drupal_tempnam(file_directory_temp(), 'mobi-build-') . '.epub';

  if (copy($realpath, $epubsource)) {
    $command = escapeshellcmd(variable_get('epub_export_mobi_binary_path', '/opt/local/bin/kindlegen'));
    $fullcommand = $command . ' ' . escapeshellarg($epubsource) . ' -o ' . escapeshellarg($mobiname);

    exec($fullcommand, $output, $return);
    $mobipath = dirname($epubsource) . '/' . $mobiname;

    if ($return === 1 && file_exists($mobipath)) {
      list($id, $vid, $bundle) = entity_extract_ids($entity->entity_type, $entity);
      $info = field_info_field($field);
      $instance = field_info_instance($entity->entity_type, $field, $bundle);
      $destination = epub_export_get_filename($entity, $info, $instance);
      $destination = preg_replace('/\.epub$/', '.mobi', $destination);

      $mobi = new StdClass();
      $mobi->uid = $entity->uid;
      $mobi->uri = $mobipath;
      $mobi->filemime = file_get_mimetype($mobi->uri);
      $mobi->status = FILE_STATUS_PERMANENT;
      $mobi = file_copy($mobi, $destination);

      if (empty($entity->{$field}[$entity->language][1]['version'])) {
        $entity->{$field}[$entity->language][1]['version'] = 1;
      }

      if (!empty($mobi->fid)) {
        // Remove any previous files
        if (!empty($entity->{$field}[$entity->language][1]['fid']) &&
          $oldfile = file_load($entity->{$field}[$entity->language][1]['fid'])) {

          $file_usage = file_usage_list($oldfile);

          if ($oldfile->status == 0 || !empty($file_usage['epub_export'])) {
            file_usage_delete($oldfile, 'epub_export', $entity->entity_type, $instance['id'], 1);
            file_delete($oldfile);
          }
        }
        file_usage_add($mobi, 'epub_export', $entity->entity_type, $id);
        $entity->{$field}[$entity->language][1]['fid'] = $mobi->fid;
        $entity->{$field}[$entity->language][1]['status'] = EPUB_EXPORT_STATUS_READY;
        $entity->{$field}[$entity->language][1]['version']++;
      }
      else {
        $entity->{$field}[$entity->language][1]['status'] = EPUB_EXPORT_STATUS_ERRORS;
      }

      $entity->epub_export_in_progress = TRUE;
      entity_save($entity->entity_type, $entity);
    }
    else if (!file_exists($mobipath)) {
      watchdog('epub_export_mobi', "Failed to build file '%mobipath' with '%command' full output below:\n<pre>%output</pre>", array('%mobipath' => $mobipath, '%command' => $fullcommand, '%output' => implode("\n", $output)));
    }
    else {
      watchdog('epub_export_mobi', "kindlegen returned non-success(%return), requested file exists.", array('%return' => $return));
    }

  }
}
