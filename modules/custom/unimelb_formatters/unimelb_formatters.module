<?php
/**
 * @file unimelb_formatters.module
 * Provides field formatters for FoA sites.
 */

/**
 * Implements hook_field_formatter_info().
 */
function unimelb_formatters_field_formatter_info() {
  return array(
    'unimelb_html5_phone_link' => array(
      'label' => t('HTML5 phone number link'),
      'field types' => array('text'),
    ),
    'unimelb_phone' => array(
      'label' => t('Phone number'),
      'field types' => array('text'),
    ),
    'unimelb_text_list_ul' => array(
      'label' => t('Unordered text list'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
    ),
    'unimelb_text_list_ol' => array(
      'label' => t('Ordered text list'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function unimelb_formatters_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'unimelb_html5_phone_link':
      // Common case: each value is displayed individually in a sub-element
      // keyed by delta. The field.tpl.php template specifies the markup
      // wrapping each value.
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => unimelb_formatters_field_formatter_unimelb_html5_phone_link($item));
      }
      break;

    case 'unimelb_phone':
      // Common case: each value is displayed individually in a sub-element
      // keyed by delta. The field.tpl.php template specifies the markup
      // wrapping each value.
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => unimelb_formatters_field_formatter_unimelb_phone($item));
      }
      break;

    case 'unimelb_text_list_ul':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => unimelb_formatters_field_formatter_unimelb_text_list($item, 'ul'));
      }
      break;

    case 'unimelb_text_list_ol':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => unimelb_formatters_field_formatter_unimelb_text_list($item, 'ol'));
      }

  }

  return $element;
}

/**
 * Helper function that formats a phone number accoridng to the
 * unimelb style guide.
 */
function _unimelb_formatters_format_unimelb_phone($item) {
  // Early return.
  if (empty($item) || empty($item['safe_value'])) {
    return $item;
  }

  // If the number contains an alpha, just return it as-is.
  if (preg_match('/[^+ 0-9\-]/', $item['value'])) {
    return $item;
  }

  // Implode the whole string, remove all but [+0-9].
  $raw = preg_replace('/[^+0-9]/', '', $item['value']);

  if ($raw{0} == '+') {
    // Already a prefixed international number.
    $rev = strrev($raw);
    $safe = substr($rev, 0, 4) . ' ' . substr($rev, 4, 4) . ' ' . substr($rev, 8, 1) . ' ' . substr($rev, 9);
  }
  else if (strlen($raw) == 8) {
    // 8 digits? Local number.
    $raw = '+613' . $raw;
    $rev = strrev($raw);
    $safe = substr($rev, 0, 4) . ' ' . substr($rev, 4, 4) . ' ' . substr($rev, 8, 1) . ' ' . substr($rev, 9);
  }
  else if (strlen($raw) == 10) {
    // 10 digits? Prefixed national.
    $raw = '+61' . substr($raw, 1);
    $rev = strrev($raw);

    // If we're 04 or 05 we're mobile.
    if (strpos($raw, '+614') === 0 || strpos($raw, '+615') === 0) {
      $safe = substr($rev, 0, 3) . ' ' . substr($rev, 3, 3) . ' ' . substr($rev, 6, 3) . ' ' . substr($rev, 9);
    }
    else {
      $safe = substr($rev, 0, 4) . ' ' . substr($rev, 4, 4) . ' ' . substr($rev, 8, 1) . ' ' . substr($rev, 9);
    }
  }
  else {
    // No idea, just return.
    return $item;
  }

  // Un-reverse the safe string for display.
  $item['safe_value'] = check_plain(strrev($safe));
  $item['value'] = $raw;

  return $item;
}

/**
 * Field Formatter; Phone number.
 *
 * Contains a little bit of smarts to render full international
 * numbers if possible.
 */
function unimelb_formatters_field_formatter_unimelb_phone($item) {
  $phone = _unimelb_formatters_format_unimelb_phone($item);
  return $phone['safe_value'];
}


/**
 * Field Formatter; HTML5 Phone Link.
 *
 * Contains a little bit of smarts to render full international
 * numbers if possible.
 */
function unimelb_formatters_field_formatter_unimelb_html5_phone_link($item) {
  // Early return.
  if (empty($item) || empty($item['safe_value'])) {
    return;
  }

  $phone = _unimelb_formatters_format_unimelb_phone($item);
  return l($phone['safe_value'], 'tel:' . $phone['value']);
}

/**
 * Format multi-line text as list items.
 */
function unimelb_formatters_field_formatter_unimelb_text_list($item, $list = 'ul') {
  $items = explode("\n", trim($item['value']));
  return '<' . $list . '><li>' . implode('</li><li>', $items) .'</li></' . $list . '>';
}
